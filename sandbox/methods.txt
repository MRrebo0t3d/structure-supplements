remove def tcl(cmd):
remove def openTclChannel(fileName,mode):
remove def closeTclChannel(handle):

def savePDB(molecule, fileName,structureNum=0):
private def getHelix(pairs,vie):
private def generateResNums(residues,seqString,linker,polyType):
private def prioritizePolymers(molList):
private     def __init__(self, pair, distance, mode, setting = None):
private     def addBound(self, distance, mode):
private     def addPair(self, pair):
private     def __init__(self,steps=15000,highTemp=5000.0,medFrac=0.05,update=20,highFrac=0.3,toMedFrac=0.5,switchFrac=0.65):
private     def __init__(self):
private     def setAngleDelta(self,value):
    def writeAngles(self,fileName):
    def readAngles(self,fileName):
private     def numericalDerivatives(self,delta,report):
private     def setSeed(self,seed):
private     def putPseudo(self,angle1,angle2):
    def setAngles(self,ranfact,mode):
    def randomizeAngles(self):
    def updateAt(self,n):
    def setForces(self,robson=None,repel=None,elec=None,dis=None,tors=None,dih=None,irp=None, shift=None, bondWt=None):
    def getForces(self):
    def dump(self,limit,shiftLim, fileName):
    def getEnergyDump(self,limit):
private     def rinertia(self):
    def getAtom(self, atomTuple):
private     def addLinkers(self, linkerList):
private     def readLinkerDict(self, linkerDict):
private     def addCyclicBond(self, polymer):
??    def testy(self):
    def printPars(self):
    def setPars(self,coarse=None,useh=None,dislim=-1,end=-1,start=-1,hardSphere=-1.0,shrinkValue=-1.0,shrinkHValue=-1.0,swap=None,optDict={}):
    def setupEnergy(self,molName,eList=None, useH=False,usePseudo=True,useCourseGrain=False,useShifts=False):
private    def usePseudo(self,usePseudo):
    def energy(self):
    def gmin(self,nsteps=100,tolerance=1.0e-5):
private    def sgdmin(self,nsteps=100,tolerance=1.0e-5):
    def refine(self,nsteps=10000,stopFitness=0.0,radius=0.01,alg="cmaes",ninterp=1.2,lambdaMul=1, nFireflies=18, diagOnly=1.0,useDegrees=False):
    def loadDihedralsFromFile(self,fileName):
    def loadDihedrals(self,lines):
    def loadDistancesFromFile(self,fileName, keepSetting=None):
    def loadDistances(self,data, keepSetting=None):
    def readXPLORDistanceConstraints(self, fileName, keepSetting=None):
    def addDisCon(self, atomName1, atomName2, lower, upper):
private    def setEntityEntryDict(self, linkerList, treeDict):
    def getAtom(self, atomTuple):
private    def validateLinkerList(self,linkerList):
private    def loadFromYaml(self,data, seed, pdbFile=""):
private    def readMoleculeDict(self,molDict):
private    def readDistanceDict(self,disDict,residues):
private    def readAngleDict(self,disDict):
private    def readRNADict(self, rnaDict):
private    def readAnnealDict(self, annealDict):
private    def readShiftDict(self, shiftDict,residues):
private    def addRiboseRestraints(self,polymer):
    def readCYANADistances(self, fileNames, molName, keepSetting=None):
    def readCYANAAngles(self, fileName,mol):
    def addSuiteAngles(self, fileName):
    def readSuiteAngles(self, mul = 0.5):
private    def addSuiteBoundary(self,polymer, residueNum,rotamerName, mul=0.5):
private    def getSuiteAngles(self, molecule):
private    def addHelices(self,polymer,helixStarts, helixEnds):
private    def addHelix(self, polymer, hStart, hStartPair, hEnd, hEndPair,convertNums=True):
private    def findHelices(self,vienna):
private    def addBasePair(self, polymer, resNumI, resNumJ):
private    def addStackPair(self, polymer, resNumI, resNumJ):
private    def measureTree(self):
    def readSequenceString(self, molName, sequence):
    def readSequence(self,seqFile):
    def readPDBFile(self,fileName):
    def readPDBFiles(self,files):
    def readPDBFileNL(self,fileName):
    def readSDFile(self,fileName):
private    def setupAtomProperties(self, compound):
private    def setupTree(self, treeDict):
private    def addAngleFile(self,file, mode='nv'):
private    def setMolecule(self, molecule):
private    def addAngle(self,angleString):
private    def addDistanceFile(self,file, mode='nv', keep=None):
    def readAngleFiles(self):
    def readDistanceFiles(self):
private    def addDistanceConstraints(self):
    def predictShifts(self):
private    def setBasePPMs(self,filterString="*.H8,H6,H5,H2,H1',H2',H3'"):
    def setShifts(self,shiftFile):
    def setup(self,homeDir,seed,writeTrajectory=False,usePseudo=False, useShifts = False):
    def addRingClosures(self):
private    def prepare(self,steps=1000, gsteps=300, alg='cmaes'):
private    def annealPrep(self,dOpt, steps=100):
private    def anneal(self,dOpt=None,stage1={},stage2={}):
private    def cdynamics(self, steps, hiTemp, medTemp, timeStep=1.0e-3):
private    def dynrun(self, steps, temp, timeStep=1.0e-3, timePower=4.0, stage1={}):
private    def sgd(self,dOpt=None,stage1={},stage2={}):
    def polish(self, steps, usePseudo=False, stage1={}):
    def output(self):
private    def getPairs(self, vienna):
    def dumpDis(self, fileName, delta=0.5, atomPat='*.H*',maxDis=4.5,prob=1.1,fixLower=0.0):
    def dumpAngles(self, fileName, delta=10):
    def setPeptideDihedrals(self, phi, psi):
private def compileLCMB(mol):
def calcLCMB(mol, scaleEnds, iStruct=0):
mol def calcOrder(mol, scaleEnds, iStruct=0):
def doAnneal(seed,dOpt=None,homeDir=None, writeTrajectory=False):
private def doSGD(seed,homeDir=None):
